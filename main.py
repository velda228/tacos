import os
import logging
import random
import json
from flask import Flask, request, jsonify, send_from_directory
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN", "7936749972:AAHuSjSWqmkPpoR3fI5EtH3PH2IrCJd1Vo8")  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù
BASE_URL = "https://tcos-by-velda.up.railway.app"
WEBAPP_URL = f"{BASE_URL}/webapp.html"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
MAIN_MENU, SET_BET, SET_COLOR, SET_NUMBER = range(4)

# –¶–≤–µ—Ç–∞ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
COLORS = {
    "red": {"name": "üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "emoji": "üî¥"},
    "black": {"name": "‚ö´ –ß–µ—Ä–Ω–æ–µ", "emoji": "‚ö´"},
    "white": {"name": "‚ö™ –ë–µ–ª–æ–µ", "emoji": "‚ö™"}
}
COLOR_VALUES = list(COLORS.keys())
NUMBERS = [1, 2, 3, 4, 5, 6]

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_store = {}

@app.route('/webapp', methods=['POST'])
def webapp_handler():
    data = request.json
    user_id = data['user_id']
    action = data.get('action')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data_store:
        user_data_store[user_id] = {
            'balance': 1000,
            'credit_taken': False
        }
    
    user_data = user_data_store[user_id]
    
    if action == 'get_data':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebApp
        return jsonify({
            'balance': user_data['balance'],
            'credit_taken': user_data['credit_taken'],
            'colors': COLORS,
            'numbers': NUMBERS
        })
    
    elif action == 'spin':
        bet = data['bet']
        color = data['color']
        number = data['number']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏
        if bet <= 0:
            return jsonify({'error': '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!'})
        
        if user_data['balance'] < bet and not (user_data['balance'] <= 0 and user_data['credit_taken']):
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!'})
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_color = random.choice(COLOR_VALUES)
        result_number = random.choice(NUMBERS)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if color == result_color and number == result_number:
            user_data['balance'] += bet
            win = True
        else:
            user_data['balance'] -= bet
            win = False
        
        return jsonify({
            'result': {
                'color': result_color,
                'number': result_number,
                'color_name': COLORS[result_color]['name'],
                'emoji': COLORS[result_color]['emoji']
            },
            'win': win,
            'new_balance': user_data['balance']
        })
    
    elif action == 'take_credit':
        user_data['credit_taken'] = True
        return jsonify({'message': '–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω!', 'new_balance': user_data['balance']})
    
    return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'})

@app.route('/webapp.html')
def serve_webapp():
    return send_from_directory('.', 'webapp.html')

# Telegram –±–æ—Ç —á–∞—Å—Ç—å
def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'balance' not in context.user_data:
        context.user_data['balance'] = 1000
        context.user_data['credit_taken'] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_data_store[user_id] = {
        'balance': context.user_data['balance'],
        'credit_taken': context.user_data['credit_taken']
    }
    
    balance = context.user_data['balance']
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))]
    ]
    
    if balance <= 0 and not context.user_data['credit_taken']:
        keyboard.append([InlineKeyboardButton("üõé –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data='take_credit')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU

def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    query.answer()
    
    context.user_data['current_bet'] = None
    context.user_data['current_color'] = None
    context.user_data['current_number'] = None
    
    query.edit_message_text(
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} –º–æ–Ω–µ—Ç\n"
        "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:"
    )
    return SET_BET

def handle_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        bet = int(update.message.text)
        balance = context.user_data['balance']
        credit_taken = context.user_data.get('credit_taken', False)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∫–∏
        if bet <= 0:
            update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return SET_BET
            
        if balance >= bet or (balance <= 0 and credit_taken):
            context.user_data['current_bet'] = bet
            return select_color(update, context)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å = 0
            if balance <= 0 and not credit_taken:
                keyboard = [
                    [InlineKeyboardButton("üõé –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data='take_credit')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                update.message.reply_text(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç?",
                    reply_markup=reply_markup
                )
                return MAIN_MENU
            else:
                update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {balance}")
                return SET_BET
    except ValueError:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return SET_BET

def select_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞"""
    keyboard = []
    for color_key, color_info in COLORS.items():
        keyboard.append(
            [InlineKeyboardButton(color_info['name'], callback_data=f'color_{color_key}')]
        )
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(
            f"–°—Ç–∞–≤–∫–∞: {context.user_data['current_bet']} –º–æ–Ω–µ—Ç\n"
            "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            f"–°—Ç–∞–≤–∫–∞: {context.user_data['current_bet']} –º–æ–Ω–µ—Ç\n"
            "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=reply_markup
        )
    return SET_COLOR

def select_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —á–∏—Å–ª–∞"""
    query = update.callback_query
    query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    color_key = query.data.split('_')[1]
    context.user_data['current_color'] = color_key
    
    keyboard = []
    row = []
    for number in NUMBERS:
        row.append(InlineKeyboardButton(str(number), callback_data=f'number_{number}'))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_color')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        f"–°—Ç–∞–≤–∫–∞: {context.user_data['current_bet']} –º–æ–Ω–µ—Ç\n"
        f"–¶–≤–µ—Ç: {COLORS[context.user_data['current_color']]['name']}\n"
        "‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=reply_markup
    )
    return SET_NUMBER

def spin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (–¥–ª—è —á–∞—Ç-–≤–µ—Ä—Å–∏–∏)"""
    query = update.callback_query
    query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    number = int(query.data.split('_')[1])
    context.user_data['current_number'] = number
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_color = random.choice(COLOR_VALUES)
    result_number = random.choice(NUMBERS)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    bet = context.user_data['current_bet']
    user_color = context.user_data['current_color']
    user_number = context.user_data['current_number']
    
    if user_color == result_color and user_number == result_number:
        context.user_data['balance'] += bet
        win_text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    else:
        context.user_data['balance'] -= bet
        win_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_id = update.effective_user.id
    if user_id in user_data_store:
        user_data_store[user_id]['balance'] = context.user_data['balance']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = (
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {COLORS[result_color]['name']} {result_number}\n"
        f"üìå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {COLORS[user_color]['name']} {user_number}\n"
        f"{win_text}\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} –º–æ–Ω–µ—Ç"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))]
    ]
    
    if context.user_data['balance'] <= 0 and not context.user_data['credit_taken']:
        keyboard.insert(0, [InlineKeyboardButton("üõé –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data='take_credit')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(result_message, reply_markup=reply_markup)
    return MAIN_MENU

def take_credit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    context.user_data['credit_taken'] = True
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id in user_data_store:
        user_data_store[user_id]['credit_taken'] = True
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        "üõé –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º.\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} –º–æ–Ω–µ—Ç\n"
        "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!",
        reply_markup=reply_markup
    )
    return MAIN_MENU

def back_to_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞"""
    return select_color(update, context)

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WebApp
    app.bot = application.bot

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(new_game, pattern='^new_game$'),
                CallbackQueryHandler(take_credit, pattern='^take_credit$')
            ],
            SET_BET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bet)
            ],
            SET_COLOR: [
                CallbackQueryHandler(select_number, pattern='^color_'),
                CallbackQueryHandler(back_to_color, pattern='^back_to_color$'),
                CallbackQueryHandler(new_game, pattern='^new_game$')
            ],
            SET_NUMBER: [
                CallbackQueryHandler(spin, pattern='^number_'),
                CallbackQueryHandler(back_to_color, pattern='^back_to_color$'),
                CallbackQueryHandler(new_game, pattern='^new_game$')
            ]
        },
        fallbacks=[],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()
    return application

def run_app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    port = int(os.environ.get("PORT", 3000))
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    import asyncio
    
    def run_bot():
        asyncio.run(setup_bot())
    
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    run_app()
