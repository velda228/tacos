import logging
import random
import json
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
MAIN_MENU, SET_BET, SET_COLOR, SET_NUMBER = range(4)

# –¶–≤–µ—Ç–∞ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
COLORS = {
    "red": {"name": "üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "emoji": "üî¥"},
    "black": {"name": "‚ö´ –ß–µ—Ä–Ω–æ–µ", "emoji": "‚ö´"},
    "white": {"name": "‚ö™ –ë–µ–ª–æ–µ", "emoji": "‚ö™"}
}
COLOR_VALUES = list(COLORS.keys())
NUMBERS = [1, 2, 3, 4, 5, 6]

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è WebApp
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_data_store = {}

@app.route('/webapp', methods=['POST'])
def webapp_handler():
    data = request.json
    user_id = data['user_id']
    action = data.get('action')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data_store:
        user_data_store[user_id] = {
            'balance': 1000,
            'credit_taken': False
        }

    user_data = user_data_store[user_id]

    if action == 'get_data':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ WebApp
        return jsonify({
            'balance': user_data['balance'],
            'credit_taken': user_data['credit_taken'],
            'colors': COLORS,
            'numbers': NUMBERS
        })

    elif action == 'spin':
        bet = data['bet']
        color = data['color']
        number = data['number']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏
        if bet <= 0:
            return jsonify({'error': '–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!'})

        if user_data['balance'] < bet and not (user_data['balance'] <= 0 and user_data['credit_taken']):
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!'})

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_color = random.choice(COLOR_VALUES)
        result_number = random.choice(NUMBERS)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
        if color == result_color and number == result_number:
            user_data['balance'] += bet
            win = True
        else:
            user_data['balance'] -= bet
            win = False

        return jsonify({
            'result': {
                'color': result_color,
                'number': result_number,
                'color_name': COLORS[result_color]['name'],
                'emoji': COLORS[result_color]['emoji']
            },
            'win': win,
            'new_balance': user_data['balance']
        })

    elif action == 'take_credit':
        user_data['credit_taken'] = True
        return jsonify({'message': '–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω!', 'new_balance': user_data['balance']})

    return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'})

# Telegram –±–æ—Ç —á–∞—Å—Ç—å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'balance' not in context.user_data:
        context.user_data['balance'] = 1000
        context.user_data['credit_taken'] = False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_data_store[user_id] = {
        'balance': context.user_data['balance'],
        'credit_taken': context.user_data['credit_taken']
    }

    balance = context.user_data['balance']

    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"https://{context.bot.username.lower().replace('_', '-')}.replit.app/webapp.html?user_id={user_id}"))]
    ]

    if balance <= 0 and not context.user_data['credit_taken']:
        keyboard.append([InlineKeyboardButton("üõé –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data='take_credit')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
    )
    return SET_BET

async def handle_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏"""
    try:
        bet = int(update.message.text)
        if bet <= 0:
            await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SET_BET

        context.user_data['current_bet'] = bet

        keyboard = [
            [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data='color_red')],
            [InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data='color_black')],
            [InlineKeyboardButton("‚ö™ –ë–µ–ª–æ–µ", callback_data='color_white')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='new_game')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
            "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=reply_markup
        )
        return SET_COLOR

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return SET_BET

async def select_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    color = query.data.split('_')[1]
    context.user_data['current_color'] = color

    keyboard = []
    for i in range(0, len(NUMBERS), 3):
        row = []
        for j in range(i, min(i+3, len(NUMBERS))):
            number = NUMBERS[j]
            row.append(InlineKeyboardButton(str(number), callback_data=f'number_{number}'))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ü–≤–µ—Ç–∞–º", callback_data='back_to_color')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üí∞ –°—Ç–∞–≤–∫–∞: {context.user_data['current_bet']} –º–æ–Ω–µ—Ç\n"
        f"üé® –¶–≤–µ—Ç: {COLORS[color]['name']}\n"
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=reply_markup
    )
    return SET_NUMBER

async def back_to_color(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data='color_red')],
        [InlineKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ", callback_data='color_black')],
        [InlineKeyboardButton("‚ö™ –ë–µ–ª–æ–µ", callback_data='color_white')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='new_game')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üí∞ –°—Ç–∞–≤–∫–∞: {context.user_data['current_bet']} –º–æ–Ω–µ—Ç\n"
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
        reply_markup=reply_markup
    )
    return SET_COLOR

async def spin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (–¥–ª—è —á–∞—Ç-–≤–µ—Ä—Å–∏–∏)"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    number = int(query.data.split('_')[1])
    context.user_data['current_number'] = number

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_color = random.choice(COLOR_VALUES)
    result_number = random.choice(NUMBERS)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    bet = context.user_data['current_bet']
    user_color = context.user_data['current_color']
    user_number = context.user_data['current_number']

    if user_color == result_color and user_number == result_number:
        context.user_data['balance'] += bet
        win_text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    else:
        context.user_data['balance'] -= bet
        win_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    user_id = update.effective_user.id
    if user_id in user_data_store:
        user_data_store[user_id]['balance'] = context.user_data['balance']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = (
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {COLORS[result_color]['name']} {result_number}\n"
        f"üìå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {COLORS[user_color]['name']} {user_number}\n"
        f"{win_text}\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} –º–æ–Ω–µ—Ç"
    )

    keyboard = [
        [InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"https://{update.get_bot().username.lower().replace('_', '-')}.replit.app/webapp.html?user_id={user_id}"))]
    ]

    if context.user_data['balance'] <= 0 and not context.user_data['credit_taken']:
        keyboard.insert(0, [InlineKeyboardButton("üõé –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data='take_credit')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(result_message, reply_markup=reply_markup)
    return MAIN_MENU

async def take_credit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    query = update.callback_query
    await query.answer()

    context.user_data['credit_taken'] = True
    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id in user_data_store:
        user_data_store[user_id]['credit_taken'] = True

    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='new_game')],
        [InlineKeyboardButton("üïπ –ò–≥—Ä–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=WebAppInfo(url=f"https://{update.get_bot().username.lower().replace('_', '-')}.replit.app/webapp.html?user_id={user_id}"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üõé –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º.\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {context.user_data['balance']} –º–æ–Ω–µ—Ç\n"
        "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!",
        reply_markup=reply_markup
    )
    return MAIN_MENU

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = "8085277321:AAHemZPBgSSzOb9Q_He4QJ10zKKWcd0iY3w"
    application = Application.builder().token(TOKEN).build()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(new_game, pattern='^new_game$'),
                CallbackQueryHandler(take_credit, pattern='^take_credit$')
            ],
            SET_BET: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bet)
            ],
            SET_COLOR: [
                CallbackQueryHandler(select_number, pattern='^color_'),
                CallbackQueryHandler(back_to_color, pattern='^back_to_color$'),
                CallbackQueryHandler(new_game, pattern='^new_game$')
            ],
            SET_NUMBER: [
                CallbackQueryHandler(spin, pattern='^number_'),
                CallbackQueryHandler(back_to_color, pattern='^back_to_color$'),
                CallbackQueryHandler(new_game, pattern='^new_game$')
            ]
        },
        fallbacks=[],
        allow_reentry=True
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())